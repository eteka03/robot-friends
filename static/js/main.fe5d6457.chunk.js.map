{"version":3,"sources":["components/Card.js","components/CardList.js","constants.js","App.js","action.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","key","email","name","image","styles","style","card","img","src","alt","infos","CardList","datas","backgroundColor","width","height","margin","textAlign","objectFit","display","flexWrap","justifyContent","paddingTop","map","robot","id","connect","state","searchField","searchRobots","robots","requestRobots","isPending","error","dispatch","handlechange","event","type","payload","target","value","onRequestRobots","fetch","then","response","json","data","catch","props","filteredRobots","filter","toLowerCase","includes","useEffect","className","onChange","fontSize","padding","placeholder","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","initialState","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.fe5d6457.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Card({key,email, name, image , styles}) {\r\n\r\n    \r\n    return (\r\n        <div key={key} style={{...styles.card}}>\r\n\r\n            <img style={styles.img} src={`https://robohash.org/${image}?200x200`} alt={image.alt} />\r\n            \r\n            <div style={styles.infos}>  \r\n                <h5>{name}</h5>\r\n\r\n                 <span>{email}</span>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport Card from './Card'\r\n\r\nexport default function CardList({datas}) {\r\n\r\nconst styles = {\r\n    card:{backgroundColor:'yellow' , width:'300px' , height:'200px',margin:'3px'},\r\n    infos:{textAlign:'center'},\r\n    img:{objectFit:'contain',width:'100%' , height:'50%'}\r\n}\r\n    return (\r\n\r\n     \r\n         <div style={{display:'flex',flexWrap:'wrap',justifyContent:'space-around', paddingTop:'2rem'}}>\r\n            {datas.map(robot => <Card \r\n                                key={datas.id}\r\n                                email={robot.email}\r\n                                name= {robot.name}\r\n                                image = {robot.name}\r\n                                styles={styles}\r\n                                />)}\r\n        </div> \r\n    )\r\n}\r\n","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD'\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\n\r\nexport const REQUEST_ROBOTS_SUCESS = 'REQUEST_ROBOTS_SUCESS';\r\n\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import React,{useState,useEffect} from 'react';\nimport './App.css';\nimport CardList from './components/CardList'\n\nimport {setSearchField,requestRobots} from './action'\nimport {connect} from 'react-redux'\n\nconst mapStateToProps = state => {\n return {\n          searchField: state.searchRobots.searchField,\n\n          robots:state.requestRobots.robots,\n          isPending:state.requestRobots.isPending,\n          error: state.requestRobots.error\n        }\n}\n\nconst mapDispatchToProps =  dispatch => \n( {\n   handlechange: event => dispatch(setSearchField(event.target.value)),\n  onRequestRobots: () => dispatch(requestRobots())\n})\n\nfunction App(props) {\n\n  const {searchField,handlechange,onRequestRobots,robots,isPending,error} = props\n  \n const  filteredRobots = robots.filter(robot => robot.name.toLowerCase().includes(searchField.toLowerCase()))\n\n  useEffect(()=>{\n\n   onRequestRobots()\n    \n  },[])\n  const styles = {\n    input:{fontSize:'1rem',padding:'1rem'}\n  }\n\n \n  return (\n    <div className=\"App\">\n      <h1>Robot friends</h1>\n\n      <input onChange={handlechange} style={styles.input} type='search' placeholder='enter robot name' />\n      { isPending ?<h3>loading...</h3>: <CardList datas={filteredRobots} /> }\n    </div>\n  );\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_FAILED,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCESS\r\n} from './constants'\r\n\r\nexport const setSearchField = text => {\r\n    \r\n    \r\n    return {\r\n    type:CHANGE_SEARCH_FIELD,\r\n    payload:text\r\n}\r\n}\r\n\r\nexport const requestRobots = () => dispatch => {\r\n    dispatch({type:REQUEST_ROBOTS_PENDING});\r\n\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then(response =>  response.json())\r\n    .then(data =>  dispatch({type:REQUEST_ROBOTS_SUCESS , payload:data}))\r\n    .catch(error => dispatch({type:REQUEST_ROBOTS_FAILED, payload:error}))\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {CHANGE_SEARCH_FIELD,\r\n    REQUEST_ROBOTS_FAILED,\r\n    REQUEST_ROBOTS_PENDING,\r\n    REQUEST_ROBOTS_SUCESS\r\n} from './constants'\r\n\r\nconst initialState = {\r\n    searchField: ''\r\n}\r\n\r\nconst initialStateRobots = {\r\n    error:'',\r\n    isPending:false,\r\n    robots:[]\r\n}\r\n\r\nexport const searchRobots  = (state = initialState, action = {}) => {\r\n    switch(action.type){\r\n        case CHANGE_SEARCH_FIELD : \r\n        return {...state,searchField:action.payload}\r\n        default: \r\n        return state\r\n    }\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots , action={}) =>{\r\n    switch(action.type){\r\n        case REQUEST_ROBOTS_PENDING:\r\n            return {...state , isPending:true}\r\n        \r\n        case REQUEST_ROBOTS_SUCESS:\r\n            return {...state,robots:action.payload,isPending:false}\r\n        \r\n        case REQUEST_ROBOTS_FAILED:\r\n            return {...state,error:action.payload,isPending:false}\r\n\r\n          default :\r\n            return state\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux'\nimport {createStore,applyMiddleware,combineReducers}from 'redux'\nimport { searchRobots , requestRobots } from './reducers';\nimport {createLogger} from 'redux-logger'\nimport thunkMiddleware from 'redux-thunk'\n\n\nconst logger = createLogger()\nconst rootReducer = combineReducers({searchRobots,requestRobots})\nconst store = createStore(rootReducer,applyMiddleware(thunkMiddleware,logger))\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}