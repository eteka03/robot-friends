{"version":3,"sources":["datas/robotsData.js","components/Card.js","components/CardList.js","App.js","serviceWorker.js","index.js"],"names":["robots","id","name","username","email","Card","image","styles","console","log","card","style","img","src","alt","infos","CardList","datas","backgroundColor","width","height","margin","textAlign","objectFit","display","flexWrap","justifyContent","paddingTop","map","robot","key","App","useState","setData","useEffect","fetch","then","response","json","users","catch","err","alert","className","onChange","e","filter","toLocaleLowerCase","includes","target","value","fontSize","padding","type","placeholder","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"0PAAaA,G,MAAS,CAClB,CACEC,GAAI,EACJC,KAAM,gBACNC,SAAU,OACVC,MAAO,qBAET,CACEH,GAAI,EACJC,KAAM,eACNC,SAAU,YACVC,MAAO,qBAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,WACVC,MAAO,sBAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,WACVC,MAAO,6BAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,SACVC,MAAO,4BAET,CACEH,GAAI,EACJC,KAAM,uBACNC,SAAU,mBACVC,MAAO,2BAET,CACEH,GAAI,EACJC,KAAM,kBACNC,SAAU,eACVC,MAAO,0BAET,CACEH,GAAI,EACJC,KAAM,2BACNC,SAAU,gBACVC,MAAO,wBAET,CACEH,GAAI,EACJC,KAAM,kBACNC,SAAU,WACVC,MAAO,2BAET,CACEH,GAAI,GACJC,KAAM,qBACNC,SAAU,iBACVC,MAAO,4B,OCzDE,SAASC,EAAT,GAA8C,IAA/BD,EAA8B,EAA9BA,MAAOF,EAAuB,EAAvBA,KAAMI,EAAiB,EAAjBA,MAAQC,EAAS,EAATA,OAG/C,OADAC,QAAQC,IAAIF,EAAOG,MAEf,yBAAMC,MAAK,eAAMJ,EAAOG,OAEpB,yBAAKC,MAAOJ,EAAOK,IAAKC,IAAG,+BAA0BP,EAA1B,YAA2CQ,IAAKR,EAAMQ,MAEjF,yBAAKH,MAAOJ,EAAOQ,OACf,4BAAKb,GAEJ,8BAAOE,KCTT,SAASY,EAAT,GAA4B,IAATC,EAAQ,EAARA,MAE5BV,EAAS,CACXG,KAAK,CAACQ,gBAAgB,SAAWC,MAAM,QAAUC,OAAO,QAAQC,OAAO,OACvEN,MAAM,CAACO,UAAU,UACjBV,IAAI,CAACW,UAAU,UAAUJ,MAAM,OAASC,OAAO,QAE/C,OAGK,yBAAKT,MAAO,CAACa,QAAQ,OAAOC,SAAS,OAAOC,eAAe,eAAgBC,WAAW,SAClFV,EAAMW,KAAI,SAAAC,GAAK,OAAI,kBAACxB,EAAD,CACAyB,IAAKb,EAAMhB,GACXG,MAAOyB,EAAMzB,MACbF,KAAO2B,EAAM3B,KACbI,MAASuB,EAAM3B,KACfK,OAAQA,QCoBzBwB,MAlCf,WAAgB,IAAD,EAEWC,mBAAS,IAFpB,mBAENf,EAFM,KAECgB,EAFD,KAwBb,OAlBAC,qBAAU,WAERC,MAAM,8CACCC,MAAK,SAAAC,GAAQ,OAAKA,EAASC,UAC3BF,MAAK,SAAAG,GAAK,OAAIN,EAAQM,MACtBC,OAAM,SAAAC,GAAG,OAAIC,MAAMD,QAE1B,IAYA,yBAAKE,UAAU,OACb,6CAEA,2BAAOC,SAVU,SAAAC,GAEvBZ,EAASjC,EAAO8C,QAAO,SAAAjB,GAAK,OAAKA,EAAM3B,KAAK6C,oBAAoBC,SAASH,EAAEI,OAAOC,MAAMH,0BAQnDpC,MAb3B,CAACwC,SAAS,OAAOC,QAAQ,QAauBC,KAAK,SAASC,YAAY,qBAC3D,IAAjBrC,EAAMsC,OAAc,0CAAsB,kBAACvC,EAAD,CAAUC,MAAOA,MCvB/CuC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhC,MAAK,SAAAiC,GACJA,EAAaC,gBAEd9B,OAAM,SAAA+B,GACL/D,QAAQ+D,MAAMA,EAAMC,c","file":"static/js/main.6b67edb1.chunk.js","sourcesContent":["export const robots = [\r\n    {\r\n      id: 1,\r\n      name: 'Leanne Graham',\r\n      username: 'Bret',\r\n      email: 'Sincere@april.biz'\r\n    },\r\n    {\r\n      id: 2,\r\n      name: 'Ervin Howell',\r\n      username: 'Antonette',\r\n      email: 'Shanna@melissa.tv'\r\n    },\r\n    {\r\n      id: 3,\r\n      name: 'Clementine Bauch',\r\n      username: 'Samantha',\r\n      email: 'Nathan@yesenia.net'\r\n    },\r\n    {\r\n      id: 4,\r\n      name: 'Patricia Lebsack',\r\n      username: 'Karianne',\r\n      email: 'Julianne.OConner@kory.org'\r\n    },\r\n    {\r\n      id: 5,\r\n      name: 'Chelsey Dietrich',\r\n      username: 'Kamren',\r\n      email: 'Lucio_Hettinger@annie.ca'\r\n    },\r\n    {\r\n      id: 6,\r\n      name: 'Mrs. Dennis Schulist',\r\n      username: 'Leopoldo_Corkery',\r\n      email: 'Karley_Dach@jasper.info'\r\n    },\r\n    {\r\n      id: 7,\r\n      name: 'Kurtis Weissnat',\r\n      username: 'Elwyn.Skiles',\r\n      email: 'Telly.Hoeger@billy.biz'\r\n    },\r\n    {\r\n      id: 8,\r\n      name: 'Nicholas Runolfsdottir V',\r\n      username: 'Maxime_Nienow',\r\n      email: 'Sherwood@rosamond.me'\r\n    },\r\n    {\r\n      id: 9,\r\n      name: 'Glenna Reichert',\r\n      username: 'Delphine',\r\n      email: 'Chaim_McDermott@dana.io'\r\n    },\r\n    {\r\n      id: 10,\r\n      name: 'Clementina DuBuque',\r\n      username: 'Moriah.Stanton',\r\n      email: 'Rey.Padberg@karina.biz'\r\n    }\r\n  ];\r\n  ","import React from 'react'\r\n\r\nexport default function Card({email, name, image , styles}) {\r\n\r\n    console.log(styles.card)\r\n    return (\r\n        <div  style={{...styles.card}}>\r\n\r\n            <img style={styles.img} src={`https://robohash.org/${image}?200x200`} alt={image.alt} />\r\n            \r\n            <div style={styles.infos}>  \r\n                <h5>{name}</h5>\r\n\r\n                 <span>{email}</span>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nimport Card from './Card'\r\n\r\nexport default function CardList({datas}) {\r\n\r\nconst styles = {\r\n    card:{backgroundColor:'yellow' , width:'300px' , height:'200px',margin:'3px'},\r\n    infos:{textAlign:'center'},\r\n    img:{objectFit:'contain',width:'100%' , height:'50%'}\r\n}\r\n    return (\r\n\r\n     \r\n         <div style={{display:'flex',flexWrap:'wrap',justifyContent:'space-around', paddingTop:'2rem'}}>\r\n            {datas.map(robot => <Card \r\n                                key={datas.id}\r\n                                email={robot.email}\r\n                                name= {robot.name}\r\n                                image = {robot.name}\r\n                                styles={styles}\r\n                                />)}\r\n        </div> \r\n    )\r\n}\r\n","import React,{useState,useEffect} from 'react';\nimport './App.css';\nimport {robots} from './datas/robotsData'\nimport CardList from './components/CardList'\n\n\nfunction App() {\n\n  const [datas, setData]= useState([])\n\n  \n\n  useEffect(()=>{\n\n    fetch('https://jsonplaceholder.typicode.com/users')\n          .then(response =>  response.json())\n          .then(users=>  setData(users))\n          .catch(err => alert(err))\n    \n  },[])\n  const styles = {\n    input:{fontSize:'1rem',padding:'1rem'}\n  }\n\n  const handlechange = e => {\n    \nsetData( robots.filter(robot =>  robot.name.toLocaleLowerCase().includes(e.target.value.toLocaleLowerCase())) )\n\n\n  }\n  return (\n    <div className=\"App\">\n      <h1>Robot friends</h1>\n\n      <input onChange={handlechange} style={styles.input} type='search' placeholder='enter robot name' />\n      { datas.length === 0 ?<h3>loading...</h3> : <CardList datas={datas} />}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}